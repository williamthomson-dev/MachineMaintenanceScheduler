@using MachineMaintenanceScheduler.Features.Machines.Interfaces
@using MachineMaintenanceScheduler.Features.Machines.Models
@using MachineMaintenanceScheduler.Shared.Layout

<Modal Title="Update Machine"
       IsVisible="@IsVisible"
       OnClose="OnClose">
    <ChildContent>
        @if (!string.IsNullOrWhiteSpace(validationError))
        {
            <div class="alert alert-danger">@validationError</div>
        }

        <label>Name:</label>
        <input class="form-control" @bind="EditableMachine.Name" />

        <label>Serial No.:</label>
        <input class="form-control" @bind="EditableMachine.SerialNumber" />
    </ChildContent>

    <FooterContent>
        <button class="btn btn-primary" @onclick="ConfirmUpdate">Save</button>
        <button class="btn btn-secondary" @onclick="OnClose">Cancel</button>
    </FooterContent>
</Modal>



@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public Machine MachineToEdit { get; set; } = new();
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Machine> OnUpdate { get; set; }

    private Machine EditableMachine { get; set; } = new();
    private string? validationError;

    [Inject] public IMachineValidator _machineValidator { get; set; } = default!;

    protected override void OnParametersSet()
    {
        validationError = null;

        if (MachineToEdit is not null)
        {
            // Clone to avoid 2-way binding issues before Save
            EditableMachine = new Machine 
            {
                Id = MachineToEdit.Id,
                Name = MachineToEdit.Name,
                SerialNumber = MachineToEdit.SerialNumber,
                LastMaintenanceDate = MachineToEdit.LastMaintenanceDate,
                SkillRequired = MachineToEdit.SkillRequired 
            };
        }
    }

    private async Task ConfirmUpdate()
    {
        var result = _machineValidator.ValidateMachine(EditableMachine);
        if (!result.IsValid)
        {
            validationError = result.GetFormattedErrors();
            return;
        }

        validationError = null;

        await OnUpdate.InvokeAsync(EditableMachine);
        await OnClose.InvokeAsync();
    }
}
