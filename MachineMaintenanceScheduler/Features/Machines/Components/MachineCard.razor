@using MachineMaintenanceScheduler.Features.Machines.Interfaces
@using MachineMaintenanceScheduler.Features.Machines.Models

<div class="card h-100 shadow-sm position-relative">

    @if (Machine.IsUnderMaintenance)
    {
        <i class="bi bi-wrench text-secondary position-absolute top-0 end-0 m-3 flipped-icon fs-4"></i>
    }

    <div class="card-body d-flex flex-column justify-content-between">
        <div>
            <h5 class="card-title text-primary fs-5">
                @Machine.Name
            </h5>

            <ul class="list-unstyled fs-6">
                <li><strong>Scheduled:</strong> @Machine.ScheduledDate?.ToShortDateString()</li>
                <li><strong>Last Maintenance:</strong> @Machine.LastMaintenanceDate?.ToShortDateString()</li>
                <li><strong>Required Skill:</strong> @Machine.RequiredSkill?.Name</li>
                <li><strong>Serial Number:</strong> @Machine.SerialNumber</li>
                <li><strong>Rule:</strong> @Machine.MachineMaintenanceRule?.Name</li>
            </ul>
        </div>

        <div class="mt-3 row g-2">
            <div class="col-4">
                <button class="btn btn-sm @GetStartStopButtonClass() w-100" @onclick="ToggleMaintenance">
                    @GetStartStopText()
                </button>
            </div>
            <div class="col-4">
                <button class="btn btn-sm btn-outline-primary w-100" @onclick="() => OnEdit.InvokeAsync(Machine)">
                    Edit
                </button>
            </div>
            <div class="col-4">
                <button class="btn btn-sm btn-outline-danger w-100" @onclick="() => OnDelete.InvokeAsync(Machine)">
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Machine Machine { get; set; } = default!;
    [Parameter] public EventCallback<Machine> OnEdit { get; set; }
    [Parameter] public EventCallback<Machine> OnDelete { get; set; }

    [Inject] public IMachineService _machineService { get; set; } = default!;


    private async Task ToggleMaintenance()
    {
        Machine.IsUnderMaintenance = !Machine.IsUnderMaintenance;
        if (Machine.IsUnderMaintenance == false)
            Machine.LastMaintenanceDate = DateTime.Now; 

        await _machineService.UpdateMachineAsync(Machine);
    }

    private string GetStartStopText() => Machine.IsUnderMaintenance ? "Stop" : "Start";

    private string GetStartStopButtonClass() => Machine.IsUnderMaintenance ? "btn-outline-warning" : "btn-outline-success";
}
