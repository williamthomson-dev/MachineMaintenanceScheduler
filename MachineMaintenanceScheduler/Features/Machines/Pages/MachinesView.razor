@page "/machinesView"
@using MachineMaintenanceScheduler.Features.Machines.Components
@using MachineMaintenanceScheduler.Features.Machines.Interfaces
@using MachineMaintenanceScheduler.Features.Machines.Models
@using MachineMaintenanceScheduler.Shared.Components
@using MachineMaintenanceScheduler.Shared.Modals
@using MachineMaintenanceScheduler.Shared.Services
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Machines</PageTitle>

<h1>Machines</h1>

<button class="btn btn-primary btn-sm" @onclick="() => ShowAddModal()">Add</button>

@if (!machines.Any())
{
    <p>No machines available.</p>
}
else
{

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var machine in machines)
            {
                <tr>
                    <td>@machine.Name</td>
                    <td>
                        <button class="btn btn-info btn-sm" @onclick="() => ShowUpdateModal(machine)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ShowDeleteModal(machine)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<AddMachine IsVisible="@isAddMachineVisible"
            OnClose="CloseAddModal"
            OnAdd="HandleMachineAdd" />

<EditMachine IsVisible="@isUpdateMachineVisible"
             MachineToEdit="selectedMachine"
             OnClose="CloseUpdateModal"
             OnUpdate="HandleMachineUpdated" />

<DeleteMachine IsVisible="@isDeleteMachineVisible"
               Machine="selectedMachine"
               OnClose="CloseDeleteModal"
               OnDelete="HandleMachineDeleted" />


@code {

    #region Variables
    private List<Machine> machines = new();
    private bool isAddMachineVisible = false;
    private bool isUpdateMachineVisible = false;
    private bool isDeleteMachineVisible = false;
    private Machine? selectedMachine = null;
    #endregion

    #region Injected Services
    [Inject] public IMachineService _machineService { get; set; } = default!;
    [Inject] public IMachineValidator _machineValidator { get; set; } = default!;
    [Inject] public IToastService _toastService { get; set; } = default!;
    #endregion

    #region Lifecycle Methods

    protected override async Task OnInitializedAsync()
    {
        await LoadMachinesAsync();
    }

    #endregion

    #region Data Loading

    private async Task LoadMachinesAsync()
    {
        machines = await _machineService.GetAllMachinesAsync();
    }

    #endregion


    #region Add Machine Modal

    private async Task ShowAddModal()
    {
        isAddMachineVisible = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task CloseAddModal()
    {
        isAddMachineVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleMachineAdd(Machine machine)
    {
        var result = _machineValidator.ValidateMachine(machine);
        if (!result.IsValid)
        {
            _toastService.ShowToastMessage(result.GetFormattedErrors());
            return;
        }

        await _machineService.CreateMachineAsync(machine);
        await LoadMachinesAsync();
        isAddMachineVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Update Machine Modal

    private async Task ShowUpdateModal(Machine machine)
    {
        selectedMachine = machine;
        isUpdateMachineVisible = true;
        await InvokeAsync(StateHasChanged);
    }
    private async Task CloseUpdateModal()
    {
        isUpdateMachineVisible = false;
        await InvokeAsync(StateHasChanged);
    }
    private async Task HandleMachineUpdated(Machine machine)
    {
        var result = _machineValidator.ValidateMachine(machine);
        if (!result.IsValid)
        {
            _toastService.ShowToastMessage(result.GetFormattedErrors()); 
            return;
        }

        await _machineService.UpdateMachineAsync(machine);
        await LoadMachinesAsync();
        isUpdateMachineVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Delete Machine Modal

    private async Task CloseDeleteModal()
    {
        isDeleteMachineVisible = false;
        await InvokeAsync(StateHasChanged);
    }
    private async Task HandleMachineDeleted(Machine machine)
    {
        await _machineService.DeleteMachineAsync(machine.Id);
        await LoadMachinesAsync();
        isDeleteMachineVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ShowDeleteModal(Machine machine)
    {
        selectedMachine = machine;
        isDeleteMachineVisible = true;
        await InvokeAsync(StateHasChanged);
    }
    #endregion

}