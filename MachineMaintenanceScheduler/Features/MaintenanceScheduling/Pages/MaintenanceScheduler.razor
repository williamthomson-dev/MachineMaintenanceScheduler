@page "/maintenanceScheduler"

@using System.Globalization
@using MachineMaintenanceScheduler.Features.MaintenanceScheduling.Components
@using MachineMaintenanceScheduler.Features.MaintenanceScheduling.Interfaces
@using MachineMaintenanceScheduler.Features.MaintenanceScheduling.Models
@using MachineMaintenanceScheduler.Features.MaintenanceScheduling.Services
@using MachineMaintenanceScheduler.Features.Machines.Interfaces
@using MachineMaintenanceScheduler.Shared.Components
@using MachineMaintenanceScheduler.Shared.Modals
@using MachineMaintenanceScheduler.Shared.Services
@attribute [StreamRendering]
@rendermode InteractiveServer

<h3>Planned Maintenance Schedule</h3>

<div class="alert alert-info mt-3">
    <strong>Note:</strong> Only machines with an assigned <em>maintenance rule</em> and <em>required skill</em> can be scheduled.
    A technician must also have a matching skill to be assigned to the task.
</div>

@if (plannedTasks is null || !plannedTasks.Any())
{
    <p>No machines require maintenance at this time.</p>
}
else
{
    <button class="btn btn-success mt-4" @onclick="ConfirmSchedule">Confirm and Apply Schedule</button>

    @if (overdueTasks.Any())
    {
        <h4 class="text-danger mt-5">Overdue Maintenance</h4>
        @foreach (var group in overdueTasks.OrderBy(g => g.Key))
        {
            <ScheduledDayGroup ScheduledDate="group.Key" Tasks="group.Value" />
        }
    }

    @if (thisWeekTasks.Any())
    {
        <h4 class="text-warning mt-5">Scheduled This Week</h4>
        @foreach (var group in thisWeekTasks.OrderBy(g => g.Key))
        {
            <ScheduledDayGroup ScheduledDate="group.Key" Tasks="group.Value" />
        }
    }

    @if (laterTasks.Any())
    {
        <h4 class="text-secondary mt-5">Scheduled Later</h4>
        @foreach (var group in laterTasks.OrderBy(g => g.Key))
        {
            <ScheduledDayGroup ScheduledDate="group.Key" Tasks="group.Value" />
        }
    }
}

<ToastMessageModal IsVisible="@isToastVisible"
                   Message="@toastMessage"
                   ToastType="ToastType.Warning" />

@code {
    private List<PlannedMaintenanceTask>? plannedTasks;
    private bool isToastVisible;
    private string toastMessage = "";

    private Dictionary<DateTime, List<PlannedMaintenanceTask>> overdueTasks = new();
    private Dictionary<DateTime, List<PlannedMaintenanceTask>> thisWeekTasks = new();
    private Dictionary<DateTime, List<PlannedMaintenanceTask>> laterTasks = new();

    [Inject] IMaintenanceScheduler _scheduler { get; set; } = default!;
    [Inject] IMachineService _machineService { get; set; } = default!;
    [Inject] IMaintenanceTaskCategorizer _maintenanceTaskCategorizer { get; set; } = default!;
    [Inject] IToastService _toastService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        plannedTasks = await _scheduler.GeneratePlannedTasksAsync();

        if (plannedTasks != null)
        {
            var (overdue, thisWeek, later) = _maintenanceTaskCategorizer.Categorize(plannedTasks);
            overdueTasks = overdue;
            thisWeekTasks = thisWeek;
            laterTasks = later;
        }
    }

    private async Task ConfirmSchedule()
    {
        if (plannedTasks is null) return;

        foreach (var task in plannedTasks)
        {
            var machine = await _machineService.GetMachineByIdAsync(task.MachineId);
            if (machine is null) continue;

            machine.ScheduledDate = task.MaintenanceScheduledDate;
            await _machineService.UpdateMachineAsync(machine);
        }

        _toastService.ShowToastMessage("Maintenance schedule confirmed and applied.");
    }
}
