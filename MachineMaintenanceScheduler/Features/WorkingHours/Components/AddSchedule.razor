@using MachineMaintenanceScheduler.Features.WorkingHours.Interfaces
@using MachineMaintenanceScheduler.Features.WorkingHours.Models
@using MachineMaintenanceScheduler.Shared.Layout

<Modal Title="Add Schedule"
       IsVisible="@IsVisible"
       OnClose="OnClose">
    <ChildContent>
        @if (!string.IsNullOrWhiteSpace(validationError))
        {
            <div class="alert alert-danger">@validationError</div>
        }

        <label>Name:</label>
        <input class="form-control" @bind="Schedule.Name" />

    </ChildContent>

    <FooterContent>
        <button class="btn btn-primary" @onclick="ConfirmAdd">Save</button>
        <button class="btn btn-secondary" @onclick="OnClose">Cancel</button>
    </FooterContent>
</Modal>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Schedule> OnAdd { get; set; }

    private Schedule Schedule { get; set; } = new();
    private string? validationError;

    // [Inject] public IScheduleValidator _scheduleValidator { get; set; } = default!;

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            ResetForm();
        }
    }

    private void ResetForm()
    {
        validationError = null;

        Schedule = new Schedule
        {
            Id = Guid.NewGuid(),
            Name = ""
        };
    }

    private async Task ConfirmAdd()
    {
        // var result = _machineValidator.ValidateMachine(Machine);
        // if (!result.IsValid)
        // {
        //     validationError = result.GetFormattedErrors();
        //     return;
        // }

        validationError = null;

        await OnAdd.InvokeAsync(Schedule);
        await OnClose.InvokeAsync();
    }

}
