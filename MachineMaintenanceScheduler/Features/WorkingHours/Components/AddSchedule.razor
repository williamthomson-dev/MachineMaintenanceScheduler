@using MachineMaintenanceScheduler.Features.WorkingHours.Interfaces 
@using MachineMaintenanceScheduler.Features.WorkingHours.Models
@using MachineMaintenanceScheduler.Shared.Layout

<Modal Title="Add Schedule"
       IsVisible="@IsVisible"
       OnClose="OnClose">
    <ChildContent>
        <label>Template:</label>
        <InputSelect class="form-control" @bind-Value="SelectedTemplateName">
            @foreach (var template in Templates)
            {
                <option value="@template.Name">@template.Name</option>
            }
        </InputSelect>
    </ChildContent>

    <FooterContent>
        <button class="btn btn-primary" @onclick="ConfirmAdd">Save</button>
        <button class="btn btn-secondary" @onclick="OnClose">Cancel</button>
    </FooterContent>
</Modal>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Schedule> OnAdd { get; set; }

    [Inject] IScheduleTemplateService TemplateService { get; set; } = default!;

    private Schedule Schedule { get; set; } = new();

    private List<Schedule> Templates { get; set; } = new();
    private string? SelectedTemplateName;

    protected override void OnInitialized()
    {
        Templates = TemplateService.GetAll().ToList();
    }

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            ResetForm();
        }
    }

    private void ResetForm()
    {
        if (Templates.Count > 0)
        {
            var defaultTemplate = Templates.First();
            SelectedTemplateName = defaultTemplate.Name;

            var newId = Guid.NewGuid();
            Schedule = new Schedule
            {
                Id = newId,
                Name = defaultTemplate.Name,
                ScheduleBlocks = defaultTemplate.ScheduleBlocks.Select(sb => new ScheduleBlock
                {
                    Id = Guid.NewGuid(),
                    DayOfWeek = sb.DayOfWeek,
                    StartTime = sb.StartTime,
                    EndTime = sb.EndTime,
                    ScheduleId = newId
                }).ToList()
            };
        }
        else
        {
            SelectedTemplateName = null;
            Schedule = new Schedule
            {
                Id = Guid.NewGuid(),
                Name = ""
            };
        }
    }

    private void ApplySelectedTemplate()
    {
        var template = Templates.FirstOrDefault(t => t.Name == SelectedTemplateName);
        if (template is not null)
        {
            var newId = Guid.NewGuid();

            Schedule = new Schedule
            {
                Id = newId,
                Name = template.Name,
                ScheduleBlocks = template.ScheduleBlocks.Select(sb => new ScheduleBlock
                {
                    Id = Guid.NewGuid(),
                    DayOfWeek = sb.DayOfWeek,
                    StartTime = sb.StartTime,
                    EndTime = sb.EndTime,
                    ScheduleId = newId
                }).ToList()
            };
        }
    }

    private async Task ConfirmAdd()
    {
        ApplySelectedTemplate();
        await OnAdd.InvokeAsync(Schedule);
        await OnClose.InvokeAsync();
    }
}
